import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://oijmohlhdxoawzvctnxx.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9pam1vaGxoZHhvYXd6dmN0bnh4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTUyODUzMjcsImV4cCI6MjA3MDg2MTMyN30.vw9G5hcSfd-m5AZqeGlmzGvqc9ImYioDFR-AsiHoFro'

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkRLS() {
  console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫ –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ cabinets...\n')

  const projectId = '8cd3a97f-e911-42c3-b145-f9f5c1c6340a'
  const cabinetId = '448df18e-52df-432d-bd82-32c8a51250fd'

  // 1. Try to query the specific cabinet that we know exists
  console.log('1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π cabinet –ø–æ ID:')
  console.log(`   ID: ${cabinetId}`)
  const { data: byId, error: byIdError } = await supabase
    .from('cabinets')
    .select('*')
    .eq('id', cabinetId)
    .single()

  if (byIdError) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞:', byIdError.message)
    console.error('   Code:', byIdError.code)
    console.error('   Details:', byIdError.details)
    console.error('   Hint:', byIdError.hint)
  } else if (byId) {
    console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω:', byId)
  } else {
    console.log('   ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω (null)')
  }
  console.log()

  // 2. Query with RLS info in error
  console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö cabinets –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞:')
  const { data: byProject, error: projectError, count } = await supabase
    .from('cabinets')
    .select('*', { count: 'exact' })
    .eq('project_id', projectId)

  console.log('   Count:', count)
  console.log('   Data length:', byProject?.length || 0)
  if (projectError) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞:', projectError.message)
    console.error('   Code:', projectError.code)
    console.error('   Details:', projectError.details)
  } else {
    console.log('   Data:', byProject)
  }
  console.log()

  // 3. Try with no filters at all
  console.log('3Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–æ–≤ (limit 50):')
  const { data: noFilter, error: noFilterError, count: noFilterCount } = await supabase
    .from('cabinets')
    .select('*', { count: 'exact' })
    .limit(50)

  console.log('   Count:', noFilterCount)
  console.log('   Data length:', noFilter?.length || 0)
  if (noFilterError) {
    console.error('   ‚ùå –û—à–∏–±–∫–∞:', noFilterError.message)
  } else if (noFilter && noFilter.length > 0) {
    console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', noFilter.length)
    console.log('   –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', noFilter[0])
  } else {
    console.log('   ‚ö†Ô∏è  RLS –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø - 0 –∑–∞–ø–∏—Å–µ–π –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ')
  }
  console.log()

  // 4. Check other tables for comparison
  console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º —Ç–∞–±–ª–∏—Ü–∞–º:')

  const tables = ['projects', 'crews', 'crew_members']
  for (const table of tables) {
    const { data, error, count } = await supabase
      .from(table)
      .select('id', { count: 'exact', head: true })
      .limit(1)

    if (error) {
      console.log(`   ‚ùå ${table}: ${error.message}`)
    } else {
      console.log(`   ‚úÖ ${table}: count=${count}, –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å`)
    }
  }
  console.log()

  // 5. Try to get RLS policies info (this might not work with anon key)
  console.log('5Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RLS (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —Å anon key):')
  const { data: policies, error: policiesError } = await supabase
    .rpc('get_policies', { table_name: 'cabinets' })

  if (policiesError) {
    console.log('   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫–∏:', policiesError.message)
    console.log('   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è anon –∫–ª—é—á–∞')
  } else {
    console.log('   Policies:', policies)
  }
  console.log()

  console.log('üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
  console.log('–ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç 0 –∑–∞–ø–∏—Å–µ–π –∏–ª–∏ –æ—à–∏–±–∫—É "row-level security policy",')
  console.log('—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ RLS –ø–æ–ª–∏—Ç–∏–∫–∞—Ö –Ω–∞ —Ç–∞–±–ª–∏—Ü–µ cabinets.')
  console.log('\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –≤ Supabase Dashboard:')
  console.log('CREATE POLICY "Allow read access to cabinets" ON public.cabinets')
  console.log('FOR SELECT USING (true);')
  console.log('\n–ò–ª–∏ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø–æ–ª–∏—Ç–∏–∫—É –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
}

checkRLS().catch(console.error)
